{"version":3,"file":"background.js","mappings":"sCAGA,IAAIA,EAFJC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQH,mBAAgB,EAExB,SAAWA,GACPA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAsB,OAAI,GAAK,SAC7CA,EAAcA,EAAoC,qBAAI,GAAK,uBAC3DA,EAAcA,EAAmC,oBAAI,GAAK,sBAC1DA,EAAcA,EAAoB,KAAI,GAAK,MAC9C,CAPD,CAOGA,IAAkBG,EAAQH,cAAgBA,EAAgB,CAAC,G,GCV1DK,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAIO,EAASL,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAQ,EAAoBJ,GAAUG,EAAQA,EAAOP,QAASG,GAG/CI,EAAOP,OACf,C,MCpBA,MAAMS,EAAU,EAAQ,KACxB,IAAIC,GAAkB,EAiCtBC,OAAOC,QAAQC,UAAUC,aAAaC,IAClC,MAAMC,EAAUC,KAAKC,MAAMH,GAC3BI,QAAQC,IAAI,0BACRJ,EAAQK,OAASZ,EAAQZ,cAAcyB,sBACvCZ,EAAkBM,EAAQO,OAC1BC,EAAkB,UACtB,IAEJ,MAAMC,EAAeT,GACVL,OAAOe,KAAKD,YAAYT,EAAQW,MAAMC,GAAIZ,EAAQA,SAEvDQ,EAAqBK,IACvBlB,OAAOmB,aAAaC,OAAOF,EAAe,CACtCG,OAAUtB,EAAkB,OAAS,QAA9B,UACT,EAENC,OAAOmB,aAAaG,UAAUnB,aAhDP,CAACoB,EAAMC,KAC1B,IAAKA,IAAQD,EACT,OACJ,MAAME,EAAa,CACfpB,QAASC,KAAKoB,UAAU,CAAEhB,KAAMZ,EAAQZ,cAAcyC,OACtDJ,KAAMA,EACNP,MAAOQ,GAEX,OAAQD,EAAKK,YACT,IAAK,cACDH,EAAWpB,QAAUC,KAAKoB,UAAU,CAAEhB,KAAMZ,EAAQZ,cAAc2C,SAClEf,EAAYW,GACZ,MACJ,IAAK,UACDA,EAAWpB,QAAUC,KAAKoB,UAAU,CAAEhB,KAAMZ,EAAQZ,cAAc4C,UAClEhB,EAAYW,GACZ,MACJ,IAAK,UACDA,EAAWpB,QAAUC,KAAKoB,UAAU,CAAEhB,KAAMZ,EAAQZ,cAAc6C,UAClEjB,EAAYW,GACZ,MACJ,IAAK,SACDA,EAAWpB,QAAUC,KAAKoB,UAAU,CAChChB,KAAMZ,EAAQZ,cAAc8C,uBAEhClB,EAAYW,GAAYQ,MAAMrB,IAC1BJ,QAAQC,IAAI,gBACZI,EAAkB,SAAS,IAGvC,IAmBJb,OAAOC,QAAQiC,YAAY/B,aAAY,KACnCH,OAAOmB,aAAaU,OAAO,CACvBR,MAAO,cACPc,SAAU,CAAC,aACXlB,GAAI,gBAER,MAAMmB,EAAOpC,OAAOmB,aAAaU,OAAO,CACpCR,MAAO,aACPJ,GAAI,WAERjB,OAAOmB,aAAaU,OAAO,CACvBR,OAAUtB,EAAkB,OAAS,QAA9B,SACPsC,SAAUD,EACVnB,GAAI,WAERjB,OAAOmB,aAAaU,OAAO,CACvBR,MAAO,gBACPgB,SAAUD,EACVnB,GAAI,YAERjB,OAAOmB,aAAaU,OAAO,CACvBR,MAAO,gBACPgB,SAAUD,EACVnB,GAAI,WACN,G","sources":["webpack://notemaster/./src/Types.ts","webpack://notemaster/webpack/bootstrap","webpack://notemaster/./src/ContextMenu.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMessageTypes = void 0;\nvar EMessageTypes;\n(function (EMessageTypes) {\n    EMessageTypes[EMessageTypes[\"overlay\"] = 0] = \"overlay\";\n    EMessageTypes[EMessageTypes[\"sidebar\"] = 1] = \"sidebar\";\n    EMessageTypes[EMessageTypes[\"create\"] = 2] = \"create\";\n    EMessageTypes[EMessageTypes[\"toggleNoteVisibility\"] = 3] = \"toggleNoteVisibility\";\n    EMessageTypes[EMessageTypes[\"updateIsNoteShowing\"] = 4] = \"updateIsNoteShowing\";\n    EMessageTypes[EMessageTypes[\"none\"] = 5] = \"none\";\n})(EMessageTypes || (exports.EMessageTypes = EMessageTypes = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Types_1 = require(\"./Types\");\nlet areNotesShowing = false;\nconst genericOnClick = (info, tab) => {\n    if (!tab || !info)\n        return;\n    const dataToSend = {\n        message: JSON.stringify({ type: Types_1.EMessageTypes.none }),\n        info: info,\n        tabId: tab,\n    };\n    switch (info.menuItemId) {\n        case \"Create Note\":\n            dataToSend.message = JSON.stringify({ type: Types_1.EMessageTypes.create });\n            sendMessage(dataToSend);\n            break;\n        case \"overlay\":\n            dataToSend.message = JSON.stringify({ type: Types_1.EMessageTypes.overlay });\n            sendMessage(dataToSend);\n            break;\n        case \"sidebar\":\n            dataToSend.message = JSON.stringify({ type: Types_1.EMessageTypes.sidebar });\n            sendMessage(dataToSend);\n            break;\n        case \"toggle\":\n            dataToSend.message = JSON.stringify({\n                type: Types_1.EMessageTypes.toggleNoteVisibility,\n            });\n            sendMessage(dataToSend).then((result) => {\n                console.log(\"got response\");\n                updateContextMenu(\"toggle\");\n            });\n            break;\n    }\n};\nchrome.runtime.onMessage.addListener((request) => {\n    const message = JSON.parse(request);\n    console.log(\"updated status backend\");\n    if (message.type === Types_1.EMessageTypes.updateIsNoteShowing) {\n        areNotesShowing = message.result;\n        updateContextMenu(\"toggle\");\n    }\n});\nconst sendMessage = (message) => {\n    return chrome.tabs.sendMessage(message.tabId.id, message.message);\n};\nconst updateContextMenu = (contextMenuID) => {\n    chrome.contextMenus.update(contextMenuID, {\n        title: `${areNotesShowing ? \"Hide\" : \"Show\"} Notes`,\n    });\n};\nchrome.contextMenus.onClicked.addListener(genericOnClick);\nchrome.runtime.onInstalled.addListener(() => {\n    chrome.contextMenus.create({\n        title: \"Create Note\",\n        contexts: [\"selection\"],\n        id: \"Create Note\",\n    });\n    const main = chrome.contextMenus.create({\n        title: \"NoteMaster\",\n        id: \"parent\",\n    });\n    chrome.contextMenus.create({\n        title: `${areNotesShowing ? \"Hide\" : \"Show\"} Notes`,\n        parentId: main,\n        id: \"toggle\",\n    });\n    chrome.contextMenus.create({\n        title: \"Overlay notes\",\n        parentId: main,\n        id: \"overlay\",\n    });\n    chrome.contextMenus.create({\n        title: \"Sidebar notes\",\n        parentId: main,\n        id: \"sidebar\",\n    });\n});\n"],"names":["EMessageTypes","Object","defineProperty","exports","value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","Types_1","areNotesShowing","chrome","runtime","onMessage","addListener","request","message","JSON","parse","console","log","type","updateIsNoteShowing","result","updateContextMenu","sendMessage","tabs","tabId","id","contextMenuID","contextMenus","update","title","onClicked","info","tab","dataToSend","stringify","none","menuItemId","create","overlay","sidebar","toggleNoteVisibility","then","onInstalled","contexts","main","parentId"],"sourceRoot":""}